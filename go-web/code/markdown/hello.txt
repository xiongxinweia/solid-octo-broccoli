<h1>1. Http</h1>
<p>Go语言内置的net/http包十分的优秀，提供了HTTP客户端和服务端的实现。</p>
<h2>net/http介绍</h2>
<p>Go语言内置的net/http包提供了HTTP客户端和服务端的实现。</p>
<h2>HTTP协议</h2>
<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>
<h2>HTTP客户端</h2>
<p>基本的HTTP/HTTPS请求 Get、Head、Post和PostForm函数发出HTTP/HTTPS请求。</p>
<pre><code class='language-go' lang='go'>resp, err := http.Get(&quot;http://5lmh.com/&quot;)
...
resp, err := http.Post(&quot;http://5lmh.com/upload&quot;, &quot;image/jpeg&quot;, &amp;buf)
...
resp, err := http.PostForm(&quot;http://5lmh.com/form&quot;,
    url.Values{&quot;key&quot;: {&quot;Value&quot;}, &quot;id&quot;: {&quot;123&quot;}})
</code></pre>
<p>程序在使用完response后必须关闭回复的主体。</p>
<pre><code class='language-go' lang='go'>resp, err := http.Get(&quot;http://5lmh.com/&quot;)
if err != nil {
    // handle error
}
defer resp.Body.Close()
body, err := ioutil.ReadAll(resp.Body)
// ...
</code></pre>
<h2>GET请求示例</h2>
<p>使用net/http包编写一个简单的发送HTTP请求的Client端，代码如下：</p>
<pre><code class='language-go' lang='go'>package main

import (
    &quot;fmt&quot;
    &quot;io/ioutil&quot;
    &quot;net/http&quot;
)

func main() {
    resp, err := http.Get(&quot;https://www.5lmh.com/&quot;)
    if err != nil {
        fmt.Println(&quot;get failed, err:&quot;, err)
        return
    }
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(&quot;read from resp.Body failed,err:&quot;, err)
        return
    }
    fmt.Print(string(body))
}
</code></pre>
<blockquote><p>将上面的代码保存之后编译成可执行文件，执行之后就能在终端打印liwenzhou.com网站首页的内容了，我们的浏览器其实就是一个发送和接收HTTP协议数据的客户端，我们平时通过浏览器访问网页其实就是从网站的服务器接收HTTP数据，然后浏览器会按照HTML、CSS等规则将网页渲染展示出来。</p>
</blockquote>
<p>&nbsp;</p>
<h2>带参数的GET请求示例</h2>
<p>关于GET请求的参数需要使用Go语言内置的net/url这个标准库来处理。</p>
<pre><code class='language-go' lang='go'>func main() {
    apiUrl := &quot;http://127.0.0.1:9090/get&quot;
    // URL param
    data := url.Values{}
    data.Set(&quot;name&quot;, &quot;枯藤&quot;)
    data.Set(&quot;age&quot;, &quot;18&quot;)
    u, err := url.ParseRequestURI(apiUrl)
    if err != nil {
        fmt.Printf(&quot;parse url requestUrl failed,err:%v\n&quot;, err)
    }
    u.RawQuery = data.Encode() // URL encode
    fmt.Println(u.String())
    resp, err := http.Get(u.String())
    if err != nil {
        fmt.Println(&quot;post failed, err:%v\n&quot;, err)
        return
    }
    defer resp.Body.Close()
    b, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(&quot;get resp failed,err:%v\n&quot;, err)
        return
    }
    fmt.Println(string(b))
}
</code></pre>
<p>对应的Server端HandlerFunc如下：</p>
<pre><code class='language-go' lang='go'>func getHandler(w http.ResponseWriter, r *http.Request) {
    defer r.Body.Close()
    data := r.URL.Query()
    fmt.Println(data.Get(&quot;name&quot;))
    fmt.Println(data.Get(&quot;age&quot;))
    answer := `{&quot;status&quot;: &quot;ok&quot;}`
    w.Write([]byte(answer))
}
</code></pre>
<h2>Post请求示例</h2>
<p>上面演示了使用net/http包发送GET请求的示例，发送POST请求的示例代码如下：</p>
<pre><code class='language-go' lang='go'>package main

import (
    &quot;fmt&quot;
    &quot;io/ioutil&quot;
    &quot;net/http&quot;
    &quot;strings&quot;
)

// net/http post demo

func main() {
    url := &quot;http://127.0.0.1:9090/post&quot;
    // 表单数据
    //contentType := &quot;application/x-www-form-urlencoded&quot;
    //data := &quot;name=枯藤&amp;age=18&quot;
    // json
    contentType := &quot;application/json&quot;
    data := `{&quot;name&quot;:&quot;枯藤&quot;,&quot;age&quot;:18}`
    resp, err := http.Post(url, contentType, strings.NewReader(data))
    if err != nil {
        fmt.Println(&quot;post failed, err:%v\n&quot;, err)
        return
    }
    defer resp.Body.Close()
    b, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println(&quot;get resp failed,err:%v\n&quot;, err)
        return
    }
    fmt.Println(string(b))
}
</code></pre>
<p>对应的Server端HandlerFunc如下：</p>
<pre><code class='language-go' lang='go'>func postHandler(w http.ResponseWriter, r *http.Request) {
    defer r.Body.Close()
    // 1. 请求类型是application/x-www-form-urlencoded时解析form数据
    r.ParseForm()
    fmt.Println(r.PostForm) // 打印form数据
    fmt.Println(r.PostForm.Get(&quot;name&quot;), r.PostForm.Get(&quot;age&quot;))
    // 2. 请求类型是application/json时从r.Body读取数据
    b, err := ioutil.ReadAll(r.Body)
    if err != nil {
        fmt.Println(&quot;read request.Body failed, err:%v\n&quot;, err)
        return
    }
    fmt.Println(string(b))
    answer := `{&quot;status&quot;: &quot;ok&quot;}`
    w.Write([]byte(answer))
}
</code></pre>
<h2>自定义Client</h2>
<p>要管理HTTP客户端的头域、重定向策略和其他设置，创建一个Client：</p>
<pre><code class='language-go' lang='go'>client := &amp;http.Client{
    CheckRedirect: redirectPolicyFunc,
}
resp, err := client.Get(&quot;http://5lmh.com&quot;)
// ...
req, err := http.NewRequest(&quot;GET&quot;, &quot;http://5lmh.com&quot;, nil)
// ...
req.Header.Add(&quot;If-None-Match&quot;, `W/&quot;wyzzy&quot;`)
resp, err := client.Do(req)
// ...
</code></pre>
<h2>自定义Transport</h2>
<p>要管理代理、TLS配置、keep-alive、压缩和其他设置，创建一个Transport：</p>
<pre><code class='language-go' lang='go'>tr := &amp;http.Transport{
    TLSClientConfig:    &amp;tls.Config{RootCAs: pool},
    DisableCompression: true,
}
client := &amp;http.Client{Transport: tr}
resp, err := client.Get(&quot;https://5lmh.com&quot;)
</code></pre>
<p>Client和Transport类型都可以安全的被多个go程同时使用。出于效率考虑，应该一次建立、尽量重用。</p>
<h2>服务端</h2>
<h3>默认的Server</h3>
<p>ListenAndServe使用指定的监听地址和处理器启动一个HTTP服务端。处理器参数通常是nil，这表示采用包变量DefaultServeMux作为处理器。</p>
<p>Handle和HandleFunc函数可以向DefaultServeMux添加处理器。</p>
<pre><code class='language-go' lang='go'>http.Handle(&quot;/foo&quot;, fooHandler)
http.HandleFunc(&quot;/bar&quot;, func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, &quot;Hello, %q&quot;, html.EscapeString(r.URL.Path))
})
log.Fatal(http.ListenAndServe(&quot;:8080&quot;, nil))
</code></pre>
<h3>默认的Server示例</h3>
<p>使用Go语言中的net/http包来编写一个简单的接收HTTP请求的Server端示例，net/http包是对net包的进一步封装，专门用来处理HTTP协议的数据。具体的代码如下：</p>
<pre><code class='language-go' lang='go'>// http server

func sayHello(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintln(w, &quot;Hello 枯藤！&quot;)
}

func main() {
    http.HandleFunc(&quot;/&quot;, sayHello)
    err := http.ListenAndServe(&quot;:9090&quot;, nil)
    if err != nil {
        fmt.Printf(&quot;http server failed, err:%v\n&quot;, err)
        return
    }
}
</code></pre>
<p>将上面的代码编译之后执行，打开你电脑上的浏览器在地址栏输入127.0.0.1:9090回车，此时就能够看到 <code>Hello 枯藤！</code></p>
<h3>自定义Server</h3>
<p>要管理服务端的行为，可以创建一个自定义的Server：</p>
<pre><code class='language-go' lang='go'>s := &amp;http.Server{
    Addr:           &quot;:8080&quot;,
    Handler:        myHandler,
    ReadTimeout:    10 * time.Second,
    WriteTimeout:   10 * time.Second,
    MaxHeaderBytes: 1 &lt;&lt; 20,
}
log.Fatal(s.ListenAndServe())
</code></pre>
